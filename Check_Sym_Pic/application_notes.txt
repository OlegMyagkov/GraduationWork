В состав программного комплекса входит три приложения:
1)	ImgPrep_V_1_0_0.py
2)	Classificator_V_1_0_0.py
3)	check_simbol_pic_V_1_0_0.py  
Для работы приложений необходим Python 3.9.7 А также необходимо установить следующие библиотеки:
pandas                             1.3.4
tensorflow                         2.8.0
imageio                            2.9.0
imgaug                             0.4.0
opencv-python             	   4.5.5.62
matplotlib                         3.4.3
matplotlib-inline                  0.1.2
numpy                              1.21.5
keras                              2.8.0
Keras-Preprocessing                1.1.2

Запуск приложений с другими версиями Python или с другими версиями перечисленных библиотек не обязательно приведет к фатальным ошибкам, 
однако автор программ не гарантирует корректной работы приложений, в другом окружении.  
Все три утилиты должны запускаться в одной и той же директории.


1. Утилита ImgPrep_V_1_0_0.py

Приложение имеет интерфейс командной строки.
В директории, где запускается приложение необходимо создать две папки со следующей структурой:
	./training_set
		/AN21
			/ thumbnail_128x128.png
		…
		/SIGNALHOLD
			/ thumbnail_128x128.png
и 
	./test_set
/AN21
			/ thumbnail_128x128.png		
…
		/SIGNALHOLD
			/ thumbnail_128x128.png

Данные папки должны содержать подпапки по количеству известных символов, в моем случае 208 папок, названия которых,
совпадают с классами символов. В каждой подпапке находится необработанное изображение символа соответствующего класса.
При запуске приложения в терминале появится запрос, необходимо ввести имя папки, которую следует обрабатывать,
затем появится второй запрос, ввести целочисленное значение, определяющее количество изображений, которые необходимо создать.
Рекомендуется для training_set создать 30 изображений, а для test_set создать 3 изображения. 
Приложение запускается отдельно для обработки папки training_set и для обработки папки test_set.
Если папки уже присутствуют в рабочей директории и содержат обработанные изображения, в необходимом количестве,
то нет необходимости производить вышеописанные действия, можно переходить к обучению классификатора.
Если мы хотим добавить новые символы, а затем переобучить модель классификатора, необходимо создать две директории add_training_set и add_test_set,
поместить в них папки с именем и изображением нового класса.  
	./add_training_set
		/new_class
			/ thumbnail_128x128.png
и 
	./add_test_set
/new_class
			/ thumbnail_128x128.png	

Далее запустить приложение ImgPrep.py и произвести действия, аналогичные действиям при подготовке training_set и test_set. 
После этого папки с подготовленными изображениями необходимо перенести из add_training_set и add_test_set в training_set и test_set,
соответственно. Далее можно переходить к обучению классификатора.

	ВАЖНО: в настоящий момент training_set и test_set содержат проверенный набор подготовленных изображений.
Никакие действия с этими директориями не требуются.

2. Утилита Classificator_V_1_0_0.py

Данная утилита запускается в той же директории, что и утилита «ImgPrep_V_1_0_0.py». 
После запуска необходимо указать количество эпох, в течение которых следует обучать нейросеть, 
рекомендуемым значением для существующей версии утилит является 15 эпох. 
Дале утилита обращается к директориям training_set и test_set, происходит обучение нейросети. 
Описание используемой нейросети находится в главе 2.3. После окончания обучения модель сохраняется 
в файл с именем Symbol_Check_model_f7_5_3_drop.h5, кроме того утилита создает файл class_names.csv этот файл содержит имена классов. 
Данные файлы используется третьей утилитой check_simbol_pic_V_1_0_0.py. Никаких дополнительных действий от пользователя больше не требуется.

	ВАЖНО: в настоящий момент существует обученная модель, которая сохранена в файле Symbol_Check_model_f7_5_3_drop.h5 и файл class_names.csv.  
До появления новых классов символов, или обнаружения иных проблем с работой классификатора, нет необходимости переобучать существующую модель.  

3. Утилита check_simbol_pic_V_1_0_0.py

Данная утилита является основной, именно она осуществляет проверку символов цифровой библиотеки. 
Утилита запускается в той же директории, что и предыдущие утилиты ImgPrep_V_1_0_0.py и Classificator_V_1_0_0.py.
Для работы программе необходимы три файла:
1)	class_names.csv, который содержит имена классов, 
2)	exeption.csv, который содержит имена ячеек с нестандартными именами, имена ячеек у которых 
в имени отсутствует значение силы выходного драйвера X0, X1…X16, описание системы наименования ячеек находится в начале раздела 2.3. 
3)	Symbol_Check_model_f7_5_3_drop.h5 в этом файле хранится обученная модель нейросети.
После запуска программа предложит ввести путь до проверяемой цифровой библиотеки. 
Далее появится предложение ввести суффикс характерный для библиотеки. Что такое суффикс описано в начале раздела 2.3. 
В процессе работы утилита будет выводить в терминал имена ячеек, вызвавших у неё «подозрение». 
По окончании проверки программа выведет информацию о файле, в который были записаны все нераспознанные ячейки, 
так же в терминал будет выведена информация сколько всего ячеек было проверено. 
